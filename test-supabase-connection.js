// –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase
// –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≤–∞—à–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É

async function testSupabaseConnection() {
  try {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase...');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Supabase –∫–ª—ñ—î–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (typeof window !== 'undefined' && window.supabase) {
      console.log('‚úÖ Supabase –∫–ª—ñ—î–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π');
      
      // –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      const { data, error } = await window.supabase
        .from('users')
        .select('count')
        .limit(1);
      
      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase:', error);
        return false;
      }
      
      console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase –ø—Ä–∞—Ü—é—î');
      return true;
    } else {
      console.log('‚ùå Supabase –∫–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function testCreateUser() {
  try {
    const testUser = {
      id: 'test-' + Date.now(),
      first_name: '–¢–µ—Å—Ç–æ–≤–∏–π',
      last_name: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      email: 'test@example.com',
      password: 'hashed_password_here'
    };
    
    const { data, error } = await window.supabase
      .from('users')
      .insert(testUser)
      .select();
    
    if (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
      return false;
    }
    
    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π:', data);
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function checkUsers() {
  try {
    const { data, error } = await window.supabase
      .from('users')
      .select('*');
    
    if (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
      return false;
    }
    
    console.log('üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ Supabase:', data);
    console.log('üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', data.length);
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
console.log('üß™ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Supabase...');
testSupabaseConnection().then(success => {
  if (success) {
    console.log('üß™ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');
    checkUsers().then(() => {
      console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
      testCreateUser();
    });
  }
});
