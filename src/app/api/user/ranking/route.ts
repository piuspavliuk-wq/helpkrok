import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // –¢–∏–º—á–∞—Å–æ–≤–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ mock –¥–∞–Ω—ñ
    const mockRankingData = {
      currentUser: {
        id: session.user.id,
        name: session.user.name || '–í–∏',
        avatar: session.user.image,
        faculty: 'medical',
        totalScore: 1250,
        testsCompleted: 12,
        averageScore: 78.5,
        rank: 15,
        points: 1250,
        achievements: 8
      },
      topUsers: [
        {
          id: '2',
          name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–µ–Ω–∫–æ',
          faculty: 'medical',
          totalScore: 2450,
          testsCompleted: 25,
          averageScore: 92.5,
          rank: 1,
          points: 2450,
          achievements: 15
        },
        {
          id: '3',
          name: '–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
          faculty: 'medical',
          totalScore: 2380,
          testsCompleted: 23,
          averageScore: 91.2,
          rank: 2,
          points: 2380,
          achievements: 14
        },
        {
          id: '4',
          name: '–î–º–∏—Ç—Ä–æ –Ü–≤–∞–Ω–µ–Ω–∫–æ',
          faculty: 'pharmaceutical',
          totalScore: 2200,
          testsCompleted: 22,
          averageScore: 89.1,
          rank: 3,
          points: 2200,
          achievements: 12
        }
      ],
      facultyRanking: {
        medical: [
          {
            id: '2',
            name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–µ–Ω–∫–æ',
            faculty: 'medical',
            totalScore: 2450,
            testsCompleted: 25,
            averageScore: 92.5,
            rank: 1,
            points: 2450,
            achievements: 15
          },
          {
            id: '3',
            name: '–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
            faculty: 'medical',
            totalScore: 2380,
            testsCompleted: 23,
            averageScore: 91.2,
            rank: 2,
            points: 2380,
            achievements: 14
          }
        ],
        pharmaceutical: [
          {
            id: '4',
            name: '–î–º–∏—Ç—Ä–æ –Ü–≤–∞–Ω–µ–Ω–∫–æ',
            faculty: 'pharmaceutical',
            totalScore: 2200,
            testsCompleted: 22,
            averageScore: 89.1,
            rank: 1,
            points: 2200,
            achievements: 12
          }
        ]
      },
      achievements: [
        {
          id: 'first_test',
          title: '–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫',
          description: '–ü—Ä–æ–π–¥—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π —Ç–µ—Å—Ç',
          icon: 'üéØ',
          points: 50,
          unlocked: true,
          unlockedAt: '2024-01-10T10:00:00Z'
        },
        {
          id: 'perfect_score',
          title: '–Ü–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
          description: '–û—Ç—Ä–∏–º–∞–π—Ç–µ 100% –≤ —Ç–µ—Å—Ç—ñ',
          icon: '‚≠ê',
          points: 100,
          unlocked: false
        },
        {
          id: 'streak_7',
          title: '–¢–∏–∂–¥–µ–Ω—å –Ω–∞–≤—á–∞–Ω–Ω—è',
          description: '–ù–∞–≤—á–∞–π—Ç–µ—Å—è 7 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å',
          icon: 'üî•',
          points: 75,
          unlocked: true,
          unlockedAt: '2024-01-15T10:00:00Z'
        },
        {
          id: 'top_10',
          title: '–¢–æ–ø-10',
          description: '–ü–æ—Ç—Ä–∞–ø—Ç–µ –≤ —Ç–æ–ø-10 —Ä–µ–π—Ç–∏–Ω–≥—É',
          icon: 'üèÜ',
          points: 200,
          unlocked: false
        }
      ]
    }

    return NextResponse.json({
      success: true,
      rankingData: mockRankingData,
      note: '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ. –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –±—É–¥–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.'
    })

  } catch (error) {
    console.error('Ranking API error:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
