import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const { firstName, lastName, email, password } = await request.json()

    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Supabase...');
    console.log('–î–∞–Ω—ñ:', { firstName, lastName, email });

    if (!supabase) {
      return NextResponse.json({
        success: false,
        error: 'Supabase –∫–ª—ñ—î–Ω—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'
      })
    }

    // –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const { data, error } = await supabase
      .from('users')
      .insert({
        first_name: firstName,
        last_name: lastName,
        email: email,
        password: password, // –ù–µ —Ö–µ—à—É—î–º–æ –¥–ª—è —Ç–µ—Å—Ç—É
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()

    if (error) {
      console.error('‚ùå Supabase insert error:', error);
      return NextResponse.json({
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Supabase',
        details: {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        }
      })
    }

    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ Supabase:', data);

    return NextResponse.json({
      success: true,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ Supabase',
      user: data
    })

  } catch (error) {
    console.error('‚ùå Test error:', error);
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞',
      details: error instanceof Error ? error.message : 'Unknown error'
    })
  }
}
