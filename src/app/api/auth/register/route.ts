import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { supabaseAdmin } from '@/lib/supabase'
import bcrypt from 'bcryptjs'

export async function POST(request: NextRequest) {
  try {
    const { firstName, lastName, email, password } = await request.json()

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    if (!firstName || !lastName || !email || !password) {
      return NextResponse.json(
        { error: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' },
        { status: 400 }
      )
    }

    if (password.length < 6) {
      return NextResponse.json(
        { error: '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤' },
        { status: 400 }
      )
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ Prisma (–ª–æ–∫–∞–ª—å–Ω–∞ –±–∞–∑–∞)
    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      return NextResponse.json(
        { error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î' },
        { status: 400 }
      )
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 12)

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Prisma (–ª–æ–∫–∞–ª—å–Ω–∞ –±–∞–∑–∞)
    const user = await prisma.user.create({
      data: {
        firstName,
        lastName,
        email,
        password: hashedPassword,
      }
    })

    // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Supabase (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    try {
      console.log('üîÑ –°–ø—Ä–æ–±–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Supabase...');
      console.log('Supabase Admin –∫–ª—ñ—î–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π:', !!supabaseAdmin);
      
      if (supabaseAdmin) {
        console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –≤ Supabase:', {
          first_name: firstName,
          last_name: lastName,
          email: email
        });
        
        const { data: supabaseData, error: supabaseError } = await supabaseAdmin
          .from('users')
          .insert({
            first_name: firstName,
            last_name: lastName,
            email: email,
            password: hashedPassword
          })
          .select();

        if (supabaseError) {
          console.error('‚ùå Supabase sync error:', supabaseError);
          console.error('‚ùå Supabase error details:', {
            message: supabaseError.message,
            details: supabaseError.details,
            hint: supabaseError.hint,
            code: supabaseError.code
          });
          // –ù–µ –±–ª–æ–∫—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫—â–æ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
        } else {
          console.log('‚úÖ Supabase sync successful:', supabaseData);
        }
      } else {
        console.log('‚ö†Ô∏è Supabase Admin not configured, skipping sync');
      }
    } catch (supabaseError) {
      console.error('‚ùå Supabase connection error:', supabaseError);
      // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –∑ –ª–æ–∫–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è
    const { password: _, ...userWithoutPassword } = user

    return NextResponse.json(
      { 
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π',
        user: userWithoutPassword 
      },
      { status: 201 }
    )

  } catch (error) {
    console.error('Registration error:', error)
    console.error('Error details:', {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      name: error instanceof Error ? error.name : undefined
    })
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
