#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ SQLite (Prisma) –≤ Supabase
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */

import { PrismaClient } from '@prisma/client'
import { createClient } from '@supabase/supabase-js'

const prisma = new PrismaClient()

// Supabase –∫–ª—ñ—î–Ω—Ç
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è Supabase')
  console.error('–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ:')
  console.error('- NEXT_PUBLIC_SUPABASE_URL')
  console.error('- SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function migrateUsers() {
  try {
    console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...')

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Prisma
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        telegramId: true,
        firstName: true,
        lastName: true,
        username: true,
        photoUrl: true,
        faculty: true,
        createdAt: true,
        updatedAt: true,
      }
    })

    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó`)

    if (users.length === 0) {
      console.log('‚úÖ –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó')
      return
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è Supabase
    const supabaseUsers = users.map(user => ({
      id: user.id,
      telegram_id: user.telegramId,
      telegram_username: user.username,
      first_name: user.firstName || user.name?.split(' ')[0] || '',
      last_name: user.lastName || user.name?.split(' ').slice(1).join(' ') || '',
      faculty: user.faculty,
      created_at: user.createdAt.toISOString(),
      updated_at: user.updatedAt.toISOString()
    }))

    // –í—Å—Ç–∞–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ Supabase
    const { data, error } = await supabase
      .from('users')
      .upsert(supabaseUsers, { 
        onConflict: 'id',
        ignoreDuplicates: false 
      })

    if (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error)
      return
    }

    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –º—ñ–≥—Ä–æ–≤–∞–Ω–æ ${supabaseUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ Supabase`)

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    const { data: insertedUsers, error: checkError } = await supabase
      .from('users')
      .select('id, first_name, last_name, telegram_id')
      .limit(5)

    if (checkError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ:', checkError)
    } else {
      console.log('üìã –ü—Ä–∏–∫–ª–∞–¥ –º—ñ–≥—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:')
      insertedUsers?.forEach(user => {
        console.log(`  - ${user.first_name} ${user.last_name} (ID: ${user.id})`)
      })
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó
migrateUsers()
  .then(() => {
    console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è:', error)
    process.exit(1)
  })
