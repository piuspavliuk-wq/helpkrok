const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function createAdminAccount() {
  try {
    console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω –∞–∫–∞—É–Ω—Ç—É...')

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –∞–¥–º—ñ–Ω
    const existingAdmin = await prisma.user.findFirst({
      where: {
        role: 'admin'
      }
    })

    if (existingAdmin) {
      console.log('‚ö†Ô∏è  –ê–¥–º—ñ–Ω –∞–∫–∞—É–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î:', existingAdmin.email)
      return existingAdmin
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω –∞–∫–∞—É–Ω—Ç
    const adminEmail = 'admin@helpkrok.com'
    const adminPassword = 'admin123' // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∫–ª–∞–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(adminPassword, 12)

    const admin = await prisma.user.create({
      data: {
        name: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
        email: adminEmail,
        password: hashedPassword,
        firstName: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
        lastName: '–°–∏—Å—Ç–µ–º–∏',
        faculty: 'medical', // –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        university: '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∏–π –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —ñ–º–µ–Ω—ñ –í. –ù. –ö–∞—Ä–∞–∑—ñ–Ω–∞',
        yearOfStudy: 6,
        role: 'admin',
        emailVerified: new Date(),
        bio: '–°–∏—Å—Ç–µ–º–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ HelpKrok'
      }
    })

    console.log('‚úÖ –ê–¥–º—ñ–Ω –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')
    console.log('üìß Email:', adminEmail)
    console.log('üîë Password:', adminPassword)
    console.log('üÜî ID:', admin.id)
    console.log('üë§ Role:', admin.role)

    return admin

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–¥–º—ñ–Ω –∞–∫–∞—É–Ω—Ç—É:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞
async function createTeacherAccount() {
  try {
    console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞...')

    const teacherEmail = 'teacher@helpkrok.com'
    const teacherPassword = 'teacher123'
    const hashedPassword = await bcrypt.hash(teacherPassword, 12)

    const teacher = await prisma.user.create({
      data: {
        name: '–í–∏–∫–ª–∞–¥–∞—á –¢–µ—Å—Ç–æ–≤–∏–π',
        email: teacherEmail,
        password: hashedPassword,
        firstName: '–í–∏–∫–ª–∞–¥–∞—á',
        lastName: '–¢–µ—Å—Ç–æ–≤–∏–π',
        faculty: 'medical',
        university: '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∏–π –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —ñ–º–µ–Ω—ñ –í. –ù. –ö–∞—Ä–∞–∑—ñ–Ω–∞',
        yearOfStudy: 6,
        role: 'teacher',
        emailVerified: new Date(),
        bio: '–¢–µ—Å—Ç–æ–≤–∏–π –≤–∏–∫–ª–∞–¥–∞—á –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–π'
      }
    })

    console.log('‚úÖ –í–∏–∫–ª–∞–¥–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')
    console.log('üìß Email:', teacherEmail)
    console.log('üîë Password:', teacherPassword)
    console.log('üÜî ID:', teacher.id)
    console.log('üë§ Role:', teacher.role)

    return teacher

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≤–∏–∫–ª–∞–¥–∞—á–∞:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —É—Ä–æ–∫—ñ–≤
async function createTestLessons() {
  try {
    console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —É—Ä–æ–∫—ñ–≤...')

    const admin = await prisma.user.findFirst({
      where: { role: 'admin' }
    })

    if (!admin) {
      console.log('‚ö†Ô∏è  –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–¥–º—ñ–Ω –∞–∫–∞—É–Ω—Ç')
      return
    }

    const testLessons = [
      {
        title: '–õ–µ–∫—Ü—ñ—è –∑ –∞–Ω–∞—Ç–æ–º—ñ—ó - –°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞',
        description: '–î–µ—Ç–∞–ª—å–Ω–µ –≤–∏–≤—á–µ–Ω–Ω—è –±—É–¥–æ–≤–∏ —Å–µ—Ä—Ü—è —Ç–∞ –∫—Ä–æ–≤–æ–Ω–æ—Å–Ω–∏—Ö —Å—É–¥–∏–Ω',
        subject: '–ê–Ω–∞—Ç–æ–º—ñ—è',
        step: 'krok1',
        faculty: 'medical',
        startDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // –ß–µ—Ä–µ–∑ 2 –¥–Ω—ñ
        endDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 90 * 60 * 1000), // +90 —Ö–≤–∏–ª–∏–Ω
        location: '–ê—É–¥–∏—Ç–æ—Ä—ñ—è 201',
        teacherName: '–ü—Ä–æ—Ñ–µ—Å–æ—Ä –Ü–≤–∞–Ω–µ–Ω–∫–æ',
        isOnline: false,
        status: 'scheduled',
        createdBy: admin.id
      },
      {
        title: '–û–Ω–ª–∞–π–Ω —Å–µ–º—ñ–Ω–∞—Ä –∑ —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥—ñ—ó',
        description: '–û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤ –¥—ñ—ó –ª—ñ–∫–∞—Ä—Å—å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤',
        subject: '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥—ñ—è',
        step: 'krok2',
        faculty: 'pharmaceutical',
        startDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // –ß–µ—Ä–µ–∑ 5 –¥–Ω—ñ–≤
        endDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000 + 120 * 60 * 1000), // +120 —Ö–≤–∏–ª–∏–Ω
        meetingLink: 'https://meet.google.com/abc-defg-hij',
        teacherName: '–î–æ—Ü–µ–Ω—Ç –ü–µ—Ç—Ä–µ–Ω–∫–æ',
        isOnline: true,
        status: 'scheduled',
        createdBy: admin.id
      },
      {
        title: '–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–Ω—è—Ç—Ç—è –∑ –±—ñ–æ—Ö—ñ–º—ñ—ó',
        description: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏',
        subject: '–ë—ñ–æ—Ö—ñ–º—ñ—è',
        step: 'krok1',
        faculty: 'medical',
        startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // –ß–µ—Ä–µ–∑ 7 –¥–Ω—ñ–≤
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + 60 * 60 * 1000), // +60 —Ö–≤–∏–ª–∏–Ω
        location: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è 15',
        teacherName: '–ê—Å–∏—Å—Ç–µ–Ω—Ç –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
        isOnline: false,
        status: 'scheduled',
        createdBy: admin.id
      }
    ]

    for (const lessonData of testLessons) {
      const lesson = await prisma.lesson.create({
        data: lessonData
      })
      console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —É—Ä–æ–∫: ${lesson.title}`)
    }

    console.log('‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ —É—Ä–æ–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö —É—Ä–æ–∫—ñ–≤:', error)
    throw error
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  try {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω –∞–∫–∞—É–Ω—Ç—É —Ç–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...\n')

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω –∞–∫–∞—É–Ω—Ç
    await createAdminAccount()
    console.log('')

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞
    await createTeacherAccount()
    console.log('')

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —É—Ä–æ–∫–∏
    await createTestLessons()
    console.log('')

    console.log('üéâ –í—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ —Ç–∞ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')
    console.log('\nüìã –î–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:')
    console.log('üëë –ê–¥–º—ñ–Ω: admin@helpkrok.com / admin123')
    console.log('üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: teacher@helpkrok.com / teacher123')

  } catch (error) {
    console.error('‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main()
}

module.exports = {
  createAdminAccount,
  createTeacherAccount,
  createTestLessons
}
