#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è RLS –ø–æ–ª—ñ—Ç–∏–∫ –≤ Supabase
 */

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://nttyhnbjlsnrxbcoxglw.supabase.co'
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your_service_role_key_here'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function createRLSPolicies() {
  try {
    console.log('üîê –°—Ç–≤–æ—Ä—é—î–º–æ RLS –ø–æ–ª—ñ—Ç–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö...')
    console.log('')

    // –ü–æ–ª—ñ—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ users
    console.log('1Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª—ñ—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ users...')
    
    const usersPolicies = [
      {
        name: 'Enable read access for all users',
        sql: `CREATE POLICY "Enable read access for all users" ON "public"."users" FOR SELECT USING (true);`
      },
      {
        name: 'Enable insert for all users', 
        sql: `CREATE POLICY "Enable insert for all users" ON "public"."users" FOR INSERT WITH CHECK (true);`
      },
      {
        name: 'Enable update for all users',
        sql: `CREATE POLICY "Enable update for all users" ON "public"."users" FOR UPDATE USING (true);`
      },
      {
        name: 'Enable delete for all users',
        sql: `CREATE POLICY "Enable delete for all users" ON "public"."users" FOR DELETE USING (true);`
      }
    ]

    for (const policy of usersPolicies) {
      try {
        const { error } = await supabase.rpc('exec_sql', { sql: policy.sql })
        if (error) {
          console.log(`‚ö†Ô∏è –ü–æ–ª—ñ—Ç–∏–∫–∞ "${policy.name}": ${error.message}`)
        } else {
          console.log(`‚úÖ –ü–æ–ª—ñ—Ç–∏–∫–∞ "${policy.name}" —Å—Ç–≤–æ—Ä–µ–Ω–∞`)
        }
      } catch (err) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫–∏ "${policy.name}": ${err.message}`)
      }
    }

    // –ü–æ–ª—ñ—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ user_subscriptions
    console.log('')
    console.log('2Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª—ñ—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ user_subscriptions...')
    
    const subscriptionsPolicies = [
      {
        name: 'Enable read access for subscriptions',
        sql: `CREATE POLICY "Enable read access for subscriptions" ON "public"."user_subscriptions" FOR SELECT USING (true);`
      },
      {
        name: 'Enable insert for subscriptions',
        sql: `CREATE POLICY "Enable insert for subscriptions" ON "public"."user_subscriptions" FOR INSERT WITH CHECK (true);`
      },
      {
        name: 'Enable update for subscriptions',
        sql: `CREATE POLICY "Enable update for subscriptions" ON "public"."user_subscriptions" FOR UPDATE USING (true);`
      }
    ]

    for (const policy of subscriptionsPolicies) {
      try {
        const { error } = await supabase.rpc('exec_sql', { sql: policy.sql })
        if (error) {
          console.log(`‚ö†Ô∏è –ü–æ–ª—ñ—Ç–∏–∫–∞ "${policy.name}": ${error.message}`)
        } else {
          console.log(`‚úÖ –ü–æ–ª—ñ—Ç–∏–∫–∞ "${policy.name}" —Å—Ç–≤–æ—Ä–µ–Ω–∞`)
        }
      } catch (err) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫–∏ "${policy.name}": ${err.message}`)
      }
    }

    console.log('')
    console.log('üéØ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± - —á–µ—Ä–µ–∑ SQL Editor:')
    console.log('')
    console.log('–°–∫–æ–ø—ñ—é–π—Ç–µ —Ç–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –≤ SQL Editor:')
    console.log('')
    console.log('-- –ü–æ–ª—ñ—Ç–∏–∫–∏ –¥–ª—è users')
    console.log('CREATE POLICY "Enable read access for all users" ON "public"."users" FOR SELECT USING (true);')
    console.log('CREATE POLICY "Enable insert for all users" ON "public"."users" FOR INSERT WITH CHECK (true);')
    console.log('CREATE POLICY "Enable update for all users" ON "public"."users" FOR UPDATE USING (true);')
    console.log('CREATE POLICY "Enable delete for all users" ON "public"."users" FOR DELETE USING (true);')
    console.log('')
    console.log('-- –ü–æ–ª—ñ—Ç–∏–∫–∏ –¥–ª—è user_subscriptions')
    console.log('CREATE POLICY "Enable read access for subscriptions" ON "public"."user_subscriptions" FOR SELECT USING (true);')
    console.log('CREATE POLICY "Enable insert for subscriptions" ON "public"."user_subscriptions" FOR INSERT WITH CHECK (true);')
    console.log('CREATE POLICY "Enable update for subscriptions" ON "public"."user_subscriptions" FOR UPDATE USING (true);')
    console.log('')
    console.log('üìù –ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫:')
    console.log('1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ Table Editor')
    console.log('2. –û–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é "users"')
    console.log('3. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–∞—é—Ç—å –∑\'—è–≤–∏—Ç–∏—Å—è')

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error)
  }
}

createRLSPolicies()
  .then(() => {
    console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫ –Ω–µ –≤–¥–∞–ª–æ—Å—è:', error)
    process.exit(1)
  })
