#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å –≤ Supabase
 */

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://nttyhnbjlsnrxbcoxglw.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im50dHlobmJqbHNucnhiY294Z2x3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NDUyMzEsImV4cCI6MjA3MzUyMTIzMX0.l6ieAE6s5CPxJ8Mw39MYLXAIvhwhFZzwFEea5z1EA-8'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function checkTables() {
  try {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ Supabase...')

    // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    const tables = ['users', 'user_subscriptions', 'courses', 'topics', 'questions']

    for (const tableName of tables) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1)

        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü—è "${tableName}": ${error.message}`)
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü—è "${tableName}": —ñ—Å–Ω—É—î`)
        }
      } catch (err) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü—è "${tableName}": –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è`)
      }
    }

    console.log('')
    console.log('üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å:')
    console.log('')
    console.log('1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ Supabase Dashboard: https://supabase.com/dashboard')
    console.log('2. –û–±–µ—Ä—ñ—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç')
    console.log('3. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ SQL Editor')
    console.log('4. –í–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π SQL:')
    console.log('')
    console.log('-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users')
    console.log('CREATE TABLE users (')
    console.log('  id TEXT PRIMARY KEY,')
    console.log('  telegram_id TEXT UNIQUE,')
    console.log('  telegram_username TEXT,')
    console.log('  first_name TEXT,')
    console.log('  last_name TEXT,')
    console.log('  email TEXT UNIQUE,')
    console.log('  faculty TEXT,')
    console.log('  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),')
    console.log('  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()')
    console.log(');')
    console.log('')
    console.log('-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ user_subscriptions')
    console.log('CREATE TABLE user_subscriptions (')
    console.log('  id TEXT PRIMARY KEY,')
    console.log('  user_id TEXT REFERENCES users(id) ON DELETE CASCADE,')
    console.log('  subscription_type TEXT,')
    console.log('  status TEXT DEFAULT \'pending\',')
    console.log('  start_date TIMESTAMP WITH TIME ZONE NOT NULL,')
    console.log('  end_date TIMESTAMP WITH TIME ZONE NOT NULL,')
    console.log('  payment_provider TEXT,')
    console.log('  payment_id TEXT,')
    console.log('  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),')
    console.log('  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()')
    console.log(');')

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error)
  }
}

checkTables()
  .then(() => {
    console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è:', error)
    process.exit(1)
  })
